0 info it worked if it ends with ok
1 verbose cli [ 'node', '/Users/yujia/.nvm/v0.10.32/bin/npm', 'publish' ]
2 info using npm@2.14.2
3 info using node@v0.10.32
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec { raw: '.',
7 silly cache add   scope: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/Users/yujia/workspace/Aop-in-js',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /Users/yujia/.npm/js_aop/2.1.0/package.tgz not in flight; packing
9 verbose tar pack [ '/Users/yujia/.npm/js_aop/2.1.0/package.tgz',
9 verbose tar pack   '/Users/yujia/workspace/Aop-in-js' ]
10 verbose tarball /Users/yujia/.npm/js_aop/2.1.0/package.tgz
11 verbose folder /Users/yujia/workspace/Aop-in-js
12 info prepublish js_aop@2.1.0
13 verbose addLocalTarball adding from inside cache /Users/yujia/.npm/js_aop/2.1.0/package.tgz
14 silly cache afterAdd js_aop@2.1.0
15 verbose afterAdd /Users/yujia/.npm/js_aop/2.1.0/package/package.json not in flight; writing
16 verbose afterAdd /Users/yujia/.npm/js_aop/2.1.0/package/package.json written
17 silly publish { name: 'js_aop',
17 silly publish   version: '2.1.0',
17 silly publish   description: 'Aspecte Orinted Programming using javascript',
17 silly publish   main: 'AopUtil.js',
17 silly publish   scripts: { test: 'echo "Error: no test specified" && exit 1' },
17 silly publish   repository:
17 silly publish    { type: 'git',
17 silly publish      url: 'git+https://github.com/yarmyarch/Aop-in-js.git' },
17 silly publish   keywords: [ 'aop', 'mock', 'javascript', 'aspected' ],
17 silly publish   author: { name: 'yarmyarch@live.cn' },
17 silly publish   license: 'ISC',
17 silly publish   bugs: { url: 'https://github.com/yarmyarch/Aop-in-js/issues' },
17 silly publish   homepage: 'https://github.com/yarmyarch/Aop-in-js#readme',
17 silly publish   readme: 'Aop-in-js\n=========\n### Install\n    npm install js_aop\n### Descriptions\nAn tool that applies Aspect Orinted Programming in javascript, can be used creating mocks easily.\n\nFor each advice that added, a <b>Strategy</b> could be choosen, while it\'s digits in Binary:\n\n    <AopUtil.ALLOW_IN, 0000000X>\n        0 - No in (Default Value);\n        1 - Allow in;\n    <AopUtil.ALLOW_OUT, 000000X0>\n        0 - No out (Default Value);\n        1 - Allow out;\n    <AopUtil.RETURN_AS_ARGUMENTS, 00000X00>\n        0 - Returned value be used as the first parameter;\n        1 - Returned value be used as arguments;\n    <AopUtil.FORCE_QUIT, 0000X000>\n        0 - Do nothing.\n        1 - Force quit;\n\nNote that the original functions is always set with strategy 3, meaning "Allow in" and "Allow out", while advices are set with 0 to all bits by default.\n```js\n// Applying a strategy:\nAopUtil.before(obj, funcName, advice,\n  AopUtil.ALLOW_IN +\n  AopUtil.ALLOW_OUT +\n  AopUtil.RETURN_AS_ARGUMENTS +\n  AopUtil.FORCE_QUIT // + ...\n);\n```\n\n#### No In\n\nThis advice will only accept the original input (when the function is called) as parameter.\n\n#### Allow In\n\nThis advice will accept the latest returned value (from the advice before it) as parameter.\n\n#### No Out\n\nThe returned value of the current advice would be ignored.\n\n#### Returned as parameter\n\nOnly useful when ALLOW_OUT set true. The returned value of this advice would be wrapped as an element of an array, so the next advice only receives 1 parameter.\n\n#### Returned as arguments\n\nOnly useful when ALLOW_OUT set true. The returned value of this advice would be used as \'arguments\' directly by the next advice.\n\n#### Force quit\n\nThe advice chain ends here and returns, all other mocks after this advice would be ignored.\n\n### Usage\n\n\n```js\n/**\n * Adds a \'before\' advice that would be executed before the original defined function body applied. Note that when\n * multiple \'before\' advices added, those ones added afterwards would be executed in advance.\n *\n * @param {Object} obj - Object that would be mocked.\n * @param {String} funcName - The name of the mocked function.\n * @param {Function} advice - Function that receives the proper params as input, while the arguments received\n *   depends on strategy used.\n * @param {int} [strategy] - Optional, the strategy code.\n */\nAopUtil.before(obj, funcName, advice[, strategy]);\n\n/**\n * Add an \'after\' advice that would be executed after the original defined function body applied. Note that when\n * multiple \'after\' advices added, those ones added afterwards would be executed later.\n *\n * @param {Object} obj - Object that would be mocked.\n * @param {String} funcName - The name of the mocked function.\n * @param {Function} advice - Function that receives the proper params as input, while the arguments received\n *   depends on strategy used.\n * @param {int} [strategy] - Optional, the strategy code.\n */\nAopUtil.after(obj, funcName, advice[, strategy]);\n\n/**\n * Clear all advices bind to target function.\n *\n * @param {Object} obj - Object that was mocked.\n * @param {String} funcName - The name of the mocked function.\n */\nAopUtil.clearAdvice(obj, funcName);\n\n/**\n * Applies an set of \'advice\' to the target object. It applies functions defined in \'aspect\' to the target object\n * using specific rules. If a function defined in target exists in \'aspect\', the advice would be used before (or\n * after regarding to the rules given) the target function. If it not exist, the advice would be applied directly\n * as a function of the target.\n *\n * @param {Object} target - Target to which those advices would be applied.\n * @param {Object<String, Function>} aspect - An object containing set of functions that would be used as advices.\n * @param {String|Object<String, String>} [rule] - Optinal. Rules to be used. Can be \'before\', \'after\' or anything\n *   else that\'s supported. If given as an Object, it should define rules specifically for each advice. Using\n *   \'before\' for default, meaning the advice would be executed before the target function.\n * @param {Integer|Object<String, Integer>} [strategy] - Optinal. Strategies to be used. Can be anything supported.\n *   If an Object given, it should define strategies specifically for each advice. Using 0 for default.\n *\n * @return {Object} - The updated target.\n */\nAopUtil.applyAspect(target, aspect[, rule[, strategy]]);\n\n/**\n * Remove all advices bind to a target.\n *\n * @param {Object} target - Target that\'s bind with aspects.\n */\nAopUtil.clearAspect(target);\n```\n\n### Demo\n#### Basic Before and After\n```\nvar AopUtil = require(\'js_aop\');\n\nvar obj = {};\nobj.demo = function(a, b) {\n  console.log(\'demo\')\n  return a - b;\n}\n\nAopUtil.before(obj, \'demo\', function(a, b) {\n    console.log(\'before demo\');\n    // [a * 2, b] would be injected as agrument list to the next advice (or the original function)\n    return [a * 2, b];\n}, AopUtil.ALLOW_OUT + AopUtil.RETURN_AS_ARGUMENTS);\n\nAopUtil.after(obj, \'demo\', function(result) {\n    // receives 1 param only from the original function.\n    console.log(\'after demo\');\n    return result * 2;\n}, AopUtil.ALLOW_IN + AopUtil.ALLOW_OUT);\n```\n#### Aspects\n```js\nvar beforeAspect = {\n  value: \'Nothing to do with this guy\',\n  demo: function(value) {\n    console.log(\'before advice applied\');\n    return value;\n  },\n  test: function(value) {\n    console.log(\'advice added: \' + value);\n    return value;\n  }\n}\nAopUtil.applyAspect(obj, beforeAspect);\n\nvar afterAspect = {\n  demo: function(value) {\n    console.log(\'after advice applied\');\n    return value;\n  }\n}\nAopUtil.applyAspect(obj, afterAspect, \'after\');\n```\n#### Aspects with rules and strategies\n```js\nvar afterAspect2 = {\n  demo: function(value) {\n    console.log(\'after advice with strategy ALLOW_IN applied: \' + value);\n    return value;\n  }\n}\nAopUtil.applyAspect(obj, afterAspect2, {\n  demo: \'after\'\n}, {\n  demo: AopUtil.ALLOW_IN\n});\n```\n#### All together\n```js\nobj.demo(1,1);\n// before aspect applied\n// before demo\n// demo\n// after demo\n// after aspect applied\n// after aspect with strategy ALLOW_IN applied: 2\n// Final result of demo: (1 * 2 - 1) * 2\n\nobj.test(1);\n// advice added: 1\n\nAopUtil.clearAspect(obj);\nconsole.log(obj.demo(1,1)); // 0\nconsole.log(obj.test); // undefined\n```',
17 silly publish   readmeFilename: 'README.md',
17 silly publish   gitHead: '5f4cf147110fbf44bc7603b0dd3802e22e80fe90',
17 silly publish   _id: 'js_aop@2.1.0',
17 silly publish   _shasum: 'fcc8db8739fd080a9802dfc2de30aded3cabf56f',
17 silly publish   _from: '.' }
18 verbose getPublishConfig undefined
19 silly mapToRegistry name js_aop
20 silly mapToRegistry using default registry
21 silly mapToRegistry registry https://unpm.uberinternal.com/
22 silly mapToRegistry uri https://unpm.uberinternal.com/js_aop
23 verbose publish registryBase https://unpm.uberinternal.com/
24 silly publish uploading /Users/yujia/.npm/js_aop/2.1.0/package.tgz
25 verbose request uri https://unpm.uberinternal.com/js_aop
26 verbose request always-auth set; sending authorization
27 info attempt registry request try #1 at 11:56:33
28 verbose request id 9980692f4142f5ee
29 http request PUT https://unpm.uberinternal.com/js_aop
30 http 401 https://unpm.uberinternal.com/js_aop
31 verbose bad json <html>
31 verbose bad json <head><title>401 Authorization Required</title></head>
31 verbose bad json <body bgcolor="white">
31 verbose bad json <center><h1>401 Authorization Required</h1></center>
31 verbose bad json <hr><center>nginx</center>
31 verbose bad json </body>
31 verbose bad json </html>
32 error registry error parsing json
33 verbose headers { server: 'nginx',
33 verbose headers   date: 'Thu, 18 Feb 2016 19:56:31 GMT',
33 verbose headers   'content-type': 'text/html',
33 verbose headers   'content-length': '188',
33 verbose headers   connection: 'close',
33 verbose headers   'www-authenticate': 'Basic realm="Restricted"',
33 verbose headers   'strict-transport-security': 'max-age=0',
33 verbose headers   'x-xss-protection': '1; mode=block' }
34 verbose request invalidating /Users/yujia/.npm/unpm.uberinternal.com/js_aop on PUT
35 error publish Failed PUT 401
36 verbose type unexpected_token
37 verbose stack SyntaxError: Unexpected token <
37 verbose stack <html>
37 verbose stack <head><title>401 Authorization Required</title></head>
37 verbose stack <body bgcolor="white">
37 verbose stack <center><h1>401 Authorization Required</h1></center>
37 verbose stack <hr><center>nginx</center>
37 verbose stack </body>
37 verbose stack </html>
37 verbose stack
37 verbose stack     at Object.parse (native)
37 verbose stack     at CachingRegistryClient.<anonymous> (/Users/yujia/.nvm/v0.10.32/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:198:23)
37 verbose stack     at Request._callback (/Users/yujia/.nvm/v0.10.32/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:171:14)
37 verbose stack     at Request.self.callback (/Users/yujia/.nvm/v0.10.32/lib/node_modules/npm/node_modules/request/request.js:198:22)
37 verbose stack     at Request.emit (events.js:98:17)
37 verbose stack     at Request.<anonymous> (/Users/yujia/.nvm/v0.10.32/lib/node_modules/npm/node_modules/request/request.js:1073:14)
37 verbose stack     at Request.emit (events.js:117:20)
37 verbose stack     at IncomingMessage.<anonymous> (/Users/yujia/.nvm/v0.10.32/lib/node_modules/npm/node_modules/request/request.js:1019:12)
37 verbose stack     at IncomingMessage.emit (events.js:117:20)
37 verbose stack     at _stream_readable.js:943:16
38 verbose cwd /Users/yujia/workspace/Aop-in-js
39 error Darwin 15.0.0
40 error argv "node" "/Users/yujia/.nvm/v0.10.32/bin/npm" "publish"
41 error node v0.10.32
42 error npm  v2.14.2
43 error Unexpected token <
43 error <html>
43 error <head><title>401 Authorization Required</title></head>
43 error <body bgcolor="white">
43 error <center><h1>401 Authorization Required</h1></center>
43 error <hr><center>nginx</center>
43 error </body>
43 error </html>
44 error If you need help, you may report this error at:
44 error     <https://github.com/npm/npm/issues>
45 verbose exit [ 1, true ]
